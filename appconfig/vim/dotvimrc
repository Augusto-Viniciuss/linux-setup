set nocompatible              " be iMproved, required by Vundle
filetype off                  " required by Vundle
set t_Co=256                  " 256 colors
set clipboard=unnamedplus     " shared clipboard with the system

set encoding=utf-8

"""""
""""" CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("~/.vim/VundlePlugins")

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" A colorful, dark color scheme
Plugin 'nanotech/jellybeans.vim'

" A Vim plugin which shows a git diff in the 'gutter' (sign column).
Plugin 'airblade/vim-gitgutter'

" ifugitive.vim: a Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'

" Lean & mean status/tabline for vim that's light as air.
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" integration with tmux (allows running bash commands in tmux splits)
Plugin 'benmills/vimux'

" code completion using tab besides ^n
Plugin 'ervandew/supertab'

" sharing registers between vims
Plugin 'ardagnir/united-front'

" file manager (^n)
Plugin 'scrooloose/nerdtree'

" home screen (necessary to have a barking dog)
Plugin 'mhinz/vim-startify'

" visualizing marks
Plugin 'kshenoy/vim-signature'

" clever abbreviations and syntax conversion
Plugin 'tpope/vim-abolish'

" All of your Plugins must be added before the following line
call vundle#end()            " required by Vundle
filetype plugin indent on    " required by Vundle

"""""
""""" / CONFIGURE VUNDLE PLUGIN MANAGER
"""""

" some color stuff
set background=dark
set cursorline
set cursorcolumn
colorscheme jellybeans

" running airline
set laststatus=2					" allow running without splitting

" should fix colors in tmux
set term=screen-256color

" general vim settings
" more natural splits
set splitbelow
set splitright
"
" set line numbering
set number
"
" indention
set expandtab                   " tab inserts spaces
set shiftwidth=2
set softtabstop=2
set autoindent                  " copy the indention from the last line
set smartindent                 " sometimes indent extra indention
set tabstop=2                   " width of the tab character
set scrolloff=10                " ads cursor margin for the edge of the page
set relativenumber              " turn on relative numbering of lines
"
"
set showmatch                   " brief jump to matching parent
set title
set nowrap                      " dont wrap text
"
" searching and patterns
set ignorecase
set smartcase
set hlsearch
set incsearch

hi Search guibg=LightBlue
hi Search ctermbg=NONE ctermfg=Yellow cterm=bold,underline

" map the leader key
let mapleader = ","

" Switch between relative and absolute line numbers with leader-N
function! NumberToggle()
  if(&relativenumber == 1)
    set nornu
  else
    set relativenumber
  endif
endfunc
nnoremap <leader>n :call NumberToggle()<cr>

" switch :paste mode 
" probably redundant while usingclipboard=unnamedplus
function! TogglePaste()
  if(&paste == 0)
    set paste
  else
    set nopaste
  endif
endfunc
nnoremap <leader>p :call TogglePaste()<cr>

" should fix colors in tmux
set term=screen-256color

" nerd tree toggle binding
map <C-n> :NERDTreeToggle<CR>

" turn on nerd tree if no file is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | wincmd h | endif
let NERDTreeQuitOnOpen=1  " close after opening a file

" CUSTOM Startify settings... TODO: finetune!
autocmd User Startified setlocal cursorline

let g:startify_enable_special         = 1
let g:startify_files_number           = 8
let g:startify_relative_path          = 1
let g:startify_change_to_dir          = 1
let g:startify_update_oldfiles        = 1
let g:startify_session_autoload       = 1
let g:startify_session_persistence    = 1
let g:startify_session_delete_buffers = 1

" should not show up in startify
let g:startify_skiplist = [
            \ 'COMMIT_EDITMSG',
            \ 'bundle/.*/doc',
            \ '/data/repo/neovim/runtime/doc',
            \ '/Users/mhi/local/vim/share/vim/vim74/doc',
            \ ]

" bookmarks in startify
let g:startify_bookmarks = [
            \ { 'b': '~/.bashrc' },
            \ { 'v': '~/.vimrc' },
            \ '~/someotherfile',
            \ ]

" the bottom part of the startify
let g:startify_custom_footer =
      \ ['', "   Pes štěká, kočka mňouká.", '']

hi StartifyBracket ctermfg=240
hi StartifyFile    ctermfg=147
hi StartifyFooter  ctermfg=240
hi StartifyHeader  ctermfg=114
hi StartifyNumber  ctermfg=215
hi StartifyPath    ctermfg=245
hi StartifySlash   ctermfg=240
hi StartifySpecial ctermfg=240

" turn on menu which suggests files
set wildmenu

" remap tags keys
map <leader>. <c-]>       " dive into the tag
map <leader>/ :pop      " go back one tag
map <leader>; :ts       " show list of files in which the tag is found

" load quotes for startify
source ~/.vim/../startify_quotes.txt

" associate *.launch with xml filetype
au BufRead,BufNewFile *.launch setfiletype xml

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
 
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'  

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction    
nnoremap <leader>a :call AutoHighlightToggle()<cr>

" remap split navigations to ctrl + hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" remap tab navigations to alt + hl
map <S-J> :tabn<cr>
map <S-K> :tabp<cr>

" allow the . to execute macro @a once for each line of a visual selection
vnoremap . :normal @a<CR>

" format whole document and return back
nmap <leader>g :normal mggg=G'g<cr>:delmarks g<cr>

abbr rinfo ROS_INFO("%");<Esc>==^f%s<c-o>:call getchar()<CR>
abbr rwarn ROS_WARN("%");<Esc>==^f%s<c-o>:call getchar()<CR>
abbr rinfot ROS_INFO_THROTTLE(1.0, "%");<Esc>==^f%s<c-o>:call getchar()<CR>
abbr rwarnt ROS_WARN_THROTTLE(1.0, "%");<Esc>==^f%s<c-o>:call getchar()<CR>
abbr iff if<space>(%)<space>{<space><left><CR><CR><right><CR><Esc>3k=4=^f%s<c-o>:call getchar()<CR>
abbr while while<space>(%)<space>{<space><left><CR><CR><right><CR><Esc>3k=4=^f%s<c-o>:call getchar()<CR>
abbr for for<space>(%)<space>{<space><left><CR><CR><right><CR><Esc>3k=4=^f%s<c-o>:call getchar()<CR>
abbr /// //////////////////// % \\\\\\\\\\\\\\\\\\\\\<Esc>==f%s<c-o>:call getchar()<CR>

inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
" if exists, source .my.vimrc
if !empty(glob("~/.my.vimrc"))
  source ~/.my.vimrc 
endif
