snippet for
for (int ${1:i} = ${2:0}; $1 < ${3}; $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet fori
for (int i = ${1:0}; i < ${2}; i++) {
	${0:${VISUAL}}
}
endsnippet

snippet while
while (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet if
if (${1}) {
	${0:${VISUAL}}
}
endsnippet

snippet ife
if (${1}) {
	${2:${VISUAL}}
} else {
	${3}
}
endsnippet

snippet mutex
${1:m}.lock();
{
	${0:${VISUAL}}
}
$1.unlock();
endsnippet

snippet switch
switch (${1}) {
case ${2}:

	${0:${VISUAL}}

break;
}
endsnippet

snippet comment
/*
${0:${VISUAL}}
*/
endsnippet

snippet include
#include <${1}>
endsnippet

snippet debuginfo
ROS_INFO("Starting: ${1:pes}");
{
	${2:${VISUAL}}
}
ROS_INFO("Ending: $1");
endsnippet

snippet pubtry
try {
	${1:${VISUAL}}
} catch (${3:...}) {
	ROS_ERROR("Exception caught during publishing topic %s.", ${2}.getTopic().c_str());
}
endsnippet

snippet try
try {
	${1:${VISUAL}}
} catch (${2:...}) {
	ROS_ERROR("Exception caught. ${3}");
}
endsnippet

snippet catch
catch (${1:...}) {
	ROS_ERROR("Exception caught. ${2}");
}
endsnippet

snippet saturate
if (!std::isfinite(${1:${VISUAL}})) {
	$1 = 0;
	ROS_ERROR("NaN detected in variable \"$1\", setting it to 0 and returning!!!");
	return;
} else if ($1 > ${2}) {
$1 = $2;
} else if ($1 < -${3}) {
$1 = -$3;
}
endsnippet

snippet checknan
if (!std::isfinite(${1:${VISUAL}})) {
	ROS_ERROR("NaN detected in variable \"$1\"!!!");
}
endsnippet

snippet ROS_INFO
ROS_INFO("${1}");
endsnippet

snippet ros_info
ROS_INFO("${1}");
endsnippet

snippet "rinfo$" "" r
ROS_INFO("${1}"`!p
if "%" in t[1]:
	snip.rv=", "
else:
	snip.rv=""
`${2});
endsnippet

snippet ROS_INFO_THROTTLE
ROS_INFO_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet ros_info_throttle
ROS_INFO_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet rinfot
ROS_INFO_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet ROS_WARN
ROS_WARN("${1}");
endsnippet

snippet ros_warn
ROS_WARN("${1}");
endsnippet

snippet rwarn
ROS_WARN("${1}");
endsnippet

snippet ROS_WARN_THROTTLE
ROS_WARN_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet ros_warn_throttle
ROS_WARN_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet rwarnt
ROS_WARN_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet rerr
ROS_ERROR("${1}");
endsnippet

snippet ros_error
ROS_ERROR("${1}");
endsnippet

snippet ROS_ERROR
ROS_ERROR("${1}");
endsnippet

snippet rerrt
ROS_ERROR_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet ros_error_throttle
ROS_ERROR_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet ROS_ERROR_THROTTLE
ROS_ERROR_THROTTLE(${2:1.0}, "${1}");
endsnippet

snippet "///" "" r
// --------------------------------------------------------------
// | `!p import math; snip.rv=' '*(30-(math.floor(len(t[1])/2.0))-2)` ${1} `!p import math; snip.rv=' '*(30-(math.ceil(len(t[1])/2.0))-2)` |
// --------------------------------------------------------------
${2}
endsnippet

snippet "fold" "" r
//{ ${1}

${2:${VISUAL}}

//}
endsnippet
